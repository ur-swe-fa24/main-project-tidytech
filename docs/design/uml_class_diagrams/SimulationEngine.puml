@startuml SimulationEngine
skinparam dpi 200
skinparam DefaultFontName Inconsolata
' To produce the UML png

class Simulator {
    - clock : int
    - robots : list[Robot]
    - floorplan : FloorPlan

    + getClock() : int
    + setClock(time : int)
    + getRobots() : list[Robot]
    + setRobots(robots : list[Robot])
    + getFloorplan() : FloorPlan
    + setFloorplan(floorplan : FloorPlan)

    + reset()
    + addRobot(bot : Robot)
    + removeRobot(bot : Robot)
    + addFloorplan(floorplan : FloorPlan)
    + removeFloorplan(floorplan : FloorPlan)
    + assignTask(floor : FloorNode, robot : Robot)
    + assignMultiTask(floors : FloorPlan, robots : list[Robot])
}

Simulator "1" o---> "1" FloorPlan : requires
Simulator "1" o---> "1,...n" Robot : requires

abstract Robot {
    # uniqueID : string
    # size : string = "S"
    # basePosition : FloorNode
    # currentPosition : FloorNode
    # batteryPercentage : int = 100
    # tasks : list[FloorNode]
    # status : bool

    + getSize() : string
    + setSize(size : string)
    + getBasePosition() : node
    + setBasePosition(base : node)
    + getCurrentPosition() : node
    + setCurrentPosition(position : node)
    + getBatteryPercentage() : int
    + setBatteryPercentage(battery : int)
    + getTasks() : list[FloorNode]
    + setTasks(floors : list[FloorNode])
    + getStatus() : bool
    + setStatus() : bool

    + canMove(destination : node) : bool
    + move(destination : node)
    + atBase() : bool
    + returnBase()
    + addTask(floor : FloorNode)
    + removeTask()
    + taskStatus() : list[FloorNode]
    + chargeRobot()
    + robotCharged() : bool
    - reportLog() : string
    - batteryUsage(used : int)
    - throwError() : string
}

class VacuumRobot {
    - dirtCapacity : int = 100

    + getDirtCapacity() : int
    + setDirtCapacity(dirt : int)

    + vacuum()
}

class ShampooRobot {
    - shampooCapacity : int = 100

    + getShampooCapacity() : int
    + setShampooCapacity(shampoo : int)

    + shampoo()
}

class ScrubberRobot {
    - waterCapacity : int = 100

    + getWaterCapacity() : int
    + setWaterCapacity(water : int)

    + scrub()
}

Robot <|-- VacuumRobot : is-a
Robot <|-- ShampooRobot : is-a
Robot <|-- ScrubberRobot : is-a

class FloorNode {
    - locationId : string
    - connections : list[FloorNode]
    - nodeType : string = 'room'
    - size : int
    - type : string = 'carpet'
    - numRobots : int = 0
    - maxRobots : int = 5
    - dirtiness : int = 100
    - interactionLevel : int

    + getLocationId() : string
    + setLocationId(id : string)
    + getConnections() : list[FloorNode]
    + setConnections(nodes : list[FloorNode])
    + getType() : string
    + setType(type : string)
    + getSize() : int
    + setSize(size : int)
    + getNumRobots() : int
    + setNumRobots(numRobots : int)
    + getDirtiness() : int
    + setDirtiness(dirtyLevel : int)
    + getInteractionLevel() : int
    + setInteractionLevel(intLevel : int)

    - dirtSimulation()
    + addRobot(bot : Robot)
    + removeRobot(bot : Robot)
    + isClean() : bool
    + getClean(bot : Robot)
    
}

Class FloorPlan {
    - floors : list[FloorNode]

    + getFloors() : list[FloorNode]
    + setFloors(floors : list[FloorNode])

    + removeFloor(floor : FloorNode)
    + addFloor(floor : FloorNode)
    + getDirtyFloors(type : string): list[FloorNode]
}

FloorPlan "1" o---> "0..n" FloorNode : manages

@enduml