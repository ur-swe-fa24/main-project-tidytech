@startuml Database
skinparam dpi 200
skinparam DefaultFontName Inconsolata
' To produce the UML png
package Database {
    class DBManager {
        + static DBManager& getInstance(const string& uri, const string& dbName)
        + mongocxx::database getDatabase() const
        - mongocxx::instance instance_
        - mongocxx::client client_
        - mongocxx::database database_
        - DBManager(const sstring& uri, const string& dbName)
        - DBManager(const DBManager&)
        - operator=(const DBManager&)
    }
    class FloorAdapter{
        + FloorAdapter(mongocxx::collection collection)
        + void insertFloor(const ststring& id, const string& name, const string& roomType, const string& floortype, const string& size, \
            
             const string& interaction, const string& restricted, const string& clean_level const std::vector<int>& neighbors)
        + optional<bsoncxx::document::value> findDocumentById(const string& floorId)
        + bool updateCleanLevel(const std::string& floorId, const std::string& newCleanLevel);
        + bool updateRestriction(const std::string& floorId, const std::string& restricted);
        + bool updateNeighbors(const std::string& floorId, const std::vector<int>& neighbors);
        + vector<bsoncxx::document::value> getAllFloors()
        - mongocxx::collection collection_
    }
    class RobotAdapter {
        + RobotAdapter(mongocxx::collection collection)
        + void insertRobot(const ststring& id, const string& name, const string& size, const string& type, \
        
            const string& baseLocation, const string& currentLocation, const string& status, const string& capacity, \

            const std::vector<int>& taskQueue, const std::vector<int>& path, const int& curBattery, \
            
            const int& totalBatteryUsed, const int& errorCount, const int& roomsCleaned)
        + optional<bsoncxx::document::value> findDocumentById(const string& robotId)
        + bool updateRobot(const std::string& id, const std::string& currentLocation, const std::string& status, const std::string& capacity, \

            const std::vector<int>& taskQueue, const std::vector<int>& path, const int& curBattery, const int& totalBatteryUsed);
        + bool updateRobotErrorCount(const std::string& id);
        + bool updateRobotRoomsCleaned(const std::string& id);
        + bool deleteRobot(const string& robotId)
        + vector<bsoncxx::document::value> getAllRobots();
        - mongocxx::collection collection_

    } 
    class ErrorAdapter {
        + ErrorAdapter(mongocxx::collection collection)
        + void insertError(const string& id, const string& robotID, const string& errorType, const int& resolved)
        + optional<bsoncxx::document::value> findDocumentById(const string& errorId)
        + vector<bsoncxx::document::value> findErrorByRobotID(const string& robotId)
        + bool updateError(const string& id, const string& robotID, const string& errorType, const int& resolved)
        + bool deleteError(const string& errorId)
        + vector<bsoncxx::document::value> getAllErrors()
        + bool allErrorIsResolved(const std::string& robotID);
        + void resolveError(const std::string& robotID);
        - mongocxx::collection collection_
    }

    DBManager *-- FloorAdapter 
    DBManager *-- RobotAdapter 
    DBManager *-- ErrorAdapter
}

@enduml
